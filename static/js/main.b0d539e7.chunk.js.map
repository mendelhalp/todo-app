{"version":3,"sources":["model/TaskModel.jsx","utils/utils.jsx","components/TaskItem.jsx","pages/ToDoPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["TaskModel","text","isChecked","this","isEnterPressed","e","key","TaskItem","props","onSelect","handleDeleteItem","index","useState","showAlert","setShowAlert","className","Row","id","type","checked","onChange","htmlFor","onClick","Modal","show","onHide","backdrop","keyboard","Header","Title","Body","Footer","Button","variant","ToDoPage","localStorage","tasks","JSON","parse","setTasks","taskText","setTaskText","filterType","setFilterType","setChecked","itemIndex","newTasks","map","task","stringify","deleteItem","splice","tasksList","Container","xs","Col","value","placeholder","target","onKeyPress","event","newTask","concat","length","left","i","itemsLeft","ToggleButtonGroup","name","active","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0d539e7.chunk.js","sourcesContent":["\r\nclass TaskModel {\r\n\r\n    constructor(text, isChecked) {\r\n        if (isChecked) {\r\n            this.text = text;\r\n            this.isChecked = isChecked;\r\n        } else {\r\n            this.text = text;\r\n            this.isChecked = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskModel;","\r\nconst isEnterPressed = (e) => e.key === 'Enter' ? true : false;\r\n\r\n\r\n\r\n\r\n\r\n    export default isEnterPressed;","import { useState } from 'react';\r\nimport { Button, Modal, Row } from 'react-bootstrap';\r\nimport './TaskItem.css';\r\n\r\n//this component render a ToDo item\r\n//props:\r\n//text - string - the title of the task (e.g. buy pills)\r\n//isChacked - boolean - is the task marked as checked\r\n//onSelect - function - function that change the isChecked value in the tasks array and rerender the item\r\n//handleDeleteItem - function - function that delete this item from the tasks array\r\n//index - number - the index of the item in the tasks array\r\n//states:\r\n//showAlert - boolean - is the alert Modal need to be shown or not\r\n\r\nconst TaskItem = (props) => {\r\n    const { text, isChecked, onSelect, handleDeleteItem, index } = props;\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n\r\n    return (\r\n        <div className=\"c-task-item\">\r\n            <Row className=\"align-items-center justify-content-between m-0\">\r\n                <div>\r\n                    <input id={'item' + index} type=\"checkbox\" checked={isChecked} onChange={onSelect} className=\"mr-2\" />\r\n                    <label className={isChecked ? \"checked\" : \"\"} htmlFor={'item' + index}>{text}</label>\r\n                </div>\r\n                <span onClick={() => isChecked ? handleDeleteItem(index) : setShowAlert(true)}>X</span>\r\n                <Modal show={showAlert} onHide={() => setShowAlert(false)} backdrop=\"static\" keyboard={false}>\r\n                    <Modal.Header>\r\n                        <Modal.Title>Active Task!</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>You are trying to delete an active task</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={() => setShowAlert(false)}>Cancel</Button>\r\n                        <Button variant=\"primary\" onClick={() => { handleDeleteItem(index); setShowAlert(false) }}>Delete anyway</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskItem;","import { useState } from 'react';\r\nimport { Button, Col, Container, Row, ToggleButtonGroup } from 'react-bootstrap';\r\nimport './ToDoPage.css';\r\nimport TaskModel from \"../model/TaskModel\";\r\nimport isEnterPressed from \"../utils/utils\";\r\nimport TaskItem from '../components/TaskItem';\r\n\r\n//this component render a ToDo list\r\n//states:\r\n//tasks - array - array of objects\r\n//taskText - string - the value of the input field\r\n//filterType - string - the type of filter to filter the list\r\nconst ToDoPage = () => {\r\n    const [tasks, setTasks] = useState(localStorage.tasks ? JSON.parse(localStorage.tasks) : []);\r\n    const [taskText, setTaskText] = useState('');\r\n    const [filterType, setFilterType] = useState('All');\r\n\r\n    //this function add taskModel object to tasks list\r\n    const addTask = (event) => {\r\n        if (isEnterPressed(event) && event.target.value) {\r\n            const newTask = new TaskModel(event.target.value);\r\n            const newTasks = tasks.concat(newTask);\r\n            localStorage.tasks = JSON.stringify(newTasks);\r\n            setTasks(newTasks);\r\n            setTaskText('');\r\n        }\r\n    }\r\n\r\n    //this function recived the index of item in the tasks array and save a new list with the new 'isChacked' status in tasks state\r\n    //input:\r\n    //itemIndex - number - location in the array (e.g 0)\r\n    const setChecked = (itemIndex) => {\r\n        const newTasks = tasks.map((task, index) => new TaskModel(task.text, (itemIndex === index) ? !task.isChecked : task.isChecked));\r\n        localStorage.tasks = JSON.stringify(newTasks);\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    //this function recived position of item and save a new list without it in tasks state\r\n    //input:\r\n    //itemIndex - number - location in the array (e.g 0)\r\n    const deleteItem = (itemIndex) => {\r\n        const newTasks = [...tasks];\r\n        newTasks.splice(itemIndex, 1);\r\n        // tasks.filter(item => item !== itemIndex);\r\n        localStorage.tasks = JSON.stringify(newTasks);\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    // calculate the amount of unchecked items left \r\n    const itemsLeft = () => {\r\n        let left = 0;\r\n        for (let i = 0; i < tasks.length; i++) {\r\n            if (!tasks[i].isChecked) {\r\n                left++\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    let tasksList = [...tasks];\r\n    if (tasks) {\r\n        \r\n\r\n        //convert tasks from plain objects to TaskModel object\r\n        //and render TaskItem for each according to the filterType\r\n        tasksList = tasksList.map((task, index) => {\r\n            if (filterType === 'Active' && !task.isChecked) {\r\n                 return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            } else if (filterType === 'Complited' && task.isChecked) {\r\n                return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            } else if (filterType === 'All'){\r\n                return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-todo\">\r\n            <Container>\r\n                <Row xs={1} className=\"justify-center\">\r\n                    <Col className=\"center mt-5 mb-3\">\r\n                        <h1>Todos</h1>\r\n                    </Col>\r\n                    <Col className=\"center mb-4\">\r\n                        <input value={taskText} className=\"text-center\" type=\"text\" placeholder=\"What's next?\"\r\n                            onChange={e => setTaskText(e.target.value)} onKeyPress={addTask} />\r\n                    </Col>\r\n                    <Col className=\"center\">\r\n                        <div className=\"task-list mb-4\">\r\n                            {tasksList}\r\n                        </div>\r\n                    </Col>\r\n                    <Col className=\"center\">\r\n                        {tasks.length > 0 &&\r\n                            <div className=\"between\">\r\n                                <span>{itemsLeft()} items left</span>\r\n                                <ToggleButtonGroup name=\"select-filter\">\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('All') }} active={(filterType === 'All') ? true : false}>All</Button>\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('Active') }} active={(filterType === 'Active') ? true : false}>Active</Button>\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('Complited') }} active={(filterType === 'Complited') ? true : false}>Complited</Button>\r\n                                </ToggleButtonGroup>\r\n                            </div>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoPage;","import './App.css';\nimport ToDoPage from './pages/ToDoPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoPage/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}