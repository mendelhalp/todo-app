[{"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\index.js":"1","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\reportWebVitals.js":"2","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\App.js":"3","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\pages\\ToDoPage.jsx":"4","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\model\\TaskModel.jsx":"5","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\utils\\utils.jsx":"6","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\components\\TaskItem.jsx":"7"},{"size":335,"mtime":1609748193718,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":173,"mtime":1609748727664,"results":"11","hashOfConfig":"9"},{"size":5266,"mtime":1609799216389,"results":"12","hashOfConfig":"9"},{"size":291,"mtime":1609763367362,"results":"13","hashOfConfig":"9"},{"size":111,"mtime":1609777138602,"results":"14","hashOfConfig":"9"},{"size":2043,"mtime":1609796182203,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"8m1e0e",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\index.js",[],["33","34"],"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\reportWebVitals.js",[],"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\App.js",[],"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\pages\\ToDoPage.jsx",["35"],"import { useState } from 'react';\r\nimport { Button, Col, Container, Row, ToggleButtonGroup } from 'react-bootstrap';\r\nimport './ToDoPage.css';\r\nimport TaskModel from \"../model/TaskModel\";\r\nimport isEnterPressed from \"../utils/utils\";\r\nimport TaskItem from '../components/TaskItem';\r\n\r\n//this component render a ToDo list\r\n//states:\r\n//tasks - array - array of objects\r\n//taskText - string - the value of the input field\r\n//filterType - string - the type of filter to filter the list\r\nconst ToDoPage = () => {\r\n    const [tasks, setTasks] = useState(localStorage.tasks ? JSON.parse(localStorage.tasks) : []);\r\n    const [taskText, setTaskText] = useState('');\r\n    const [filterType, setFilterType] = useState('All');\r\n\r\n    //this function add taskModel object to tasks list\r\n    const addTask = (event) => {\r\n        if (isEnterPressed(event) && event.target.value) {\r\n            const newTask = new TaskModel(event.target.value);\r\n            const newTasks = tasks.concat(newTask);\r\n            localStorage.tasks = JSON.stringify(newTasks);\r\n            setTasks(newTasks);\r\n            setTaskText('');\r\n        }\r\n    }\r\n\r\n    //this function recived the index of item in the tasks array and save a new list with the new 'isChacked' status in tasks state\r\n    //input:\r\n    //itemIndex - number - location in the array (e.g 0)\r\n    const setChecked = (itemIndex) => {\r\n        const newTasks = tasks.map((task, index) => new TaskModel(task.text, (itemIndex === index) ? !task.isChecked : task.isChecked));\r\n        localStorage.tasks = JSON.stringify(newTasks);\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    //this function recived position of item and save a new list without it in tasks state\r\n    //input:\r\n    //itemIndex - number - location in the array (e.g 0)\r\n    const deleteItem = (itemIndex) => {\r\n        const newTasks = [...tasks];\r\n        newTasks.splice(itemIndex, 1);\r\n        // tasks.filter(item => item !== itemIndex);\r\n        localStorage.tasks = JSON.stringify(newTasks);\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    // calculate the amount of unchecked items left \r\n    const itemsLeft = () => {\r\n        let left = 0;\r\n        for (let i = 0; i < tasks.length; i++) {\r\n            if (!tasks[i].isChecked) {\r\n                left++\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    let tasksList = [...tasks];\r\n    if (tasks) {\r\n        \r\n\r\n        //convert tasks from plain objects to TaskModel object\r\n        //and render TaskItem for each according to the filterType\r\n        tasksList = tasksList.map((task, index) => {\r\n            if (filterType === 'Active' && !task.isChecked) {\r\n                 return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            } else if (filterType === 'Complited' && task.isChecked) {\r\n                return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            } else if (filterType === 'All'){\r\n                return <TaskItem key={index} index={index} text={task.text} isChecked={task.isChecked}\r\n                    onSelect={() => setChecked(index)} handleDeleteItem={(index) => deleteItem(index)} />\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-todo\">\r\n            <Container>\r\n                <Row xs={1} className=\"justify-center\">\r\n                    <Col className=\"center mt-5 mb-3\">\r\n                        <h1>Todos</h1>\r\n                    </Col>\r\n                    <Col className=\"center mb-4\">\r\n                        <input value={taskText} className=\"text-center\" type=\"text\" placeholder=\"What's next?\"\r\n                            onChange={e => setTaskText(e.target.value)} onKeyPress={addTask} />\r\n                    </Col>\r\n                    <Col className=\"center\">\r\n                        <div className=\"task-list mb-4\">\r\n                            {tasksList}\r\n                        </div>\r\n                    </Col>\r\n                    <Col className=\"center\">\r\n                        {tasks.length > 0 &&\r\n                            <div className=\"between\">\r\n                                <span>{itemsLeft()} items left</span>\r\n                                <ToggleButtonGroup name=\"select-filter\">\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('All') }} active={(filterType === 'All') ? true : false}>All</Button>\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('Active') }} active={(filterType === 'Active') ? true : false}>Active</Button>\r\n                                    <Button className=\"m-1\" variant=\"light\" onClick={() => { setFilterType('Complited') }} active={(filterType === 'Complited') ? true : false}>Complited</Button>\r\n                                </ToggleButtonGroup>\r\n                            </div>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoPage;","C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\model\\TaskModel.jsx",[],"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\utils\\utils.jsx",[],"C:\\Users\\mende\\OneDrive\\Desktop\\פיתוח WEB\\עבודות\\שיעור 26 - React Practice\\ToDo App\\src\\components\\TaskItem.jsx",[],["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":66,"column":49,"nodeType":"44","messageId":"45","endLine":66,"endColumn":51},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["48"],["49"],"no-global-assign","no-unsafe-negation"]